---
import {
  transformerMetaHighlight,
  transformerNotationFocus,
  transformerNotationDiff,
  transformerRenderWhitespace,
} from '@shikijs/transformers'
import { Code } from 'astro:components'
import type {
  BuiltinLanguage,
  LanguageRegistration,
  SpecialLanguage,
} from 'shiki'
import CheckIcon from '../icons/check.astro'
import CopyIcon from '../icons/copy.astro'

interface Props {
  code: string
  language?: BuiltinLanguage | SpecialLanguage | LanguageRegistration
  highlightedLines?: string
  filePath?: string
  icon?: string
}

const props = Astro.props
const code = props.code
  .split('\n')
  // NOTE: Slice to remove the first and last empty lines
  .slice(1, -1)
  .map((line, i) => `${i + 1}    ${line}`)
  .join('\n')
---

<div
  class="group relative mb-6 overflow-hidden rounded-lg border-2 border-brand bg-dark"
>
  {
    props.filePath ? (
      <div class="relative bg-darkest px-4 pt-3">
        <p class="w-max rounded-t bg-dark px-3 py-1 text-sm italic">
          {props.filePath}
        </p>
        <p class="absolute right-5 top-2">{props.language}</p>
      </div>
    ) : null
  }

  <button
    class="group absolute bottom-2 right-2 grid h-8 w-8 grid-cols-1 grid-rows-1 place-items-center rounded border border-brand bg-transparent text-light opacity-0 transition-all duration-150 ease-in-out hover:bg-brand group-hover:opacity-100"
    id="copyToClipboard"
    data-value={props.code}
  >
    <span
      class="invisible col-start-1 row-start-1 opacity-0 group-data-[checked]:visible group-data-[checked]:opacity-100"
    >
      <CheckIcon />
    </span>
    <span
      class="col-start-1 row-start-1 group-data-[checked]:invisible group-data-[checked]:opacity-0"
    >
      <CopyIcon />
    </span>
  </button>

  <Code
    code={code}
    class="!bg-dark p-4 text-sm"
    lang={props.language}
    meta={props.highlightedLines}
    transformers={[
      transformerRenderWhitespace(),
      transformerMetaHighlight(),
      transformerNotationFocus(),
      transformerNotationDiff(),
      {
        tokens(tokens) {
          return tokens.map((token) => {
            const [slotOne, ...restOfSlots] = token

            const match = /^(\S+)(.*)$/.exec(slotOne.content)
            if (!match) return token

            const [, firstPart, rest] = match
            if (!rest) return token

            return [
              { ...slotOne, content: firstPart, offset: 0 },
              { ...slotOne, content: rest, offset: 10 },
              ...restOfSlots,
            ]
          })
        },
        line(node) {
          // @ts-expect-error
          this.addClassToHast(node.children[0], 'line-number')
        },
      },
    ]}
  />
</div>

<script>
  const copyButtons = document.querySelectorAll('#copyToClipboard')

  copyButtons.forEach((button) => {
    button.addEventListener('click', async () => {
      const codeToCopy = button.getAttribute('data-value')
      if (!codeToCopy) return

      try {
        await navigator.clipboard.writeText(codeToCopy)
        button.setAttribute('data-checked', 'true')

        setTimeout(() => {
          button.removeAttribute('data-checked')
        }, 1000)
      } catch (e) {
        console.log(e)
      }
    })
  })
</script>
