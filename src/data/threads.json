{"meta":{"lastFetchedData":"2021-03-22T21:10:07Z","numberOfThreads":2,"numberofTweets":23,"totalMetrics":{"retweet_count":20,"reply_count":0,"like_count":14,"quote_count":0}},"threads":[{"conversation":"1368551099846770689","numberOfTweets":6,"slug":"js-looping-over-arrays","title":"🟡 JS: Looping over Arrays 🟡 ","tweets":[{"id":"1368551099846770689","media":[{"media_key":"3_1368551096126410752","type":"photo","url":"https://pbs.twimg.com/media/Ev4R-JWWEAAxfyp.jpg"}],"text":"🟡 JS: Looping over Arrays 🟡 \n\nLooping over arrays is such a massive part of handling data in JavaScript that I wanted to cover some of the most common methods of doing so in this thread. \n\nLet me know your favourite 💬 1/7\n--\n#100DaysOfCode #JavaScript #developers https://t.co/EbqSKO29p7","type":"tweet","date":"2021-03-07T13:16:23.000Z","position":1,"links":[]},{"id":"1368551101109264384","media":[{"media_key":"3_1368551096160026628","type":"photo","url":"https://pbs.twimg.com/media/Ev4R-JeXAAQsL0q.jpg"}],"text":"1️⃣ For Loop\n\nThe for loop is one of the fundamentals of the language due to its versatility. It's no different when it comes to looping over an array.\n\nThe for loop works by creating a variable and incrementing it while a condition is true, we then access the index. 2/7 https://t.co/tOJTWQSkYE","type":"tweet","date":"2021-03-07T13:16:23.000Z","position":2,"links":[]},{"id":"1368551102363426817","media":[{"media_key":"3_1368551096160034819","type":"photo","url":"https://pbs.twimg.com/media/Ev4R-JeXIAMIXVg.jpg"}],"text":"2️⃣ While Loop\n\nA slightly more unusual way of looping through arrays is the while loop. \n\nSimilar to the for loop, the while loop will loop while a condition is true but unlike a for loop, it doesn't have a pre-determined end and instead will go forever while true. 3/7 https://t.co/XqpGkWw6x2","type":"tweet","date":"2021-03-07T13:16:23.000Z","position":3,"links":[]},{"id":"1368551103621693443","media":[{"media_key":"3_1368551096134799361","type":"photo","url":"https://pbs.twimg.com/media/Ev4R-JYWEAE12Ko.jpg"}],"text":"3️⃣ .forEach()\n\nMore recently introduced to the language, the .forEach() method is built into the Array.prototype and allows for us to directly loop over an array without calling a loop explicitly.\n\nIn fact, it actually uses loops underneath but just makes the syntax simpler. 4/7 https://t.co/bm1OUtc4oY","type":"tweet","date":"2021-03-07T13:16:24.000Z","position":4,"links":[]},{"id":"1368551104875802633","media":[{"media_key":"3_1368551096160026629","type":"photo","url":"https://pbs.twimg.com/media/Ev4R-JeXAAUfLP9.jpg"}],"text":"4️⃣ .map()\n\n.map() is actually very similar to .forEach() with one key difference. \n\nWhen using .forEach() we can only iterate through the array and not return anything. But, when we use .map() we can return values from the callback function as shown in the 🖼️. 5/7 https://t.co/VXcjJUeezg","type":"tweet","date":"2021-03-07T13:16:24.000Z","position":5,"links":[]},{"id":"1368551106159198208","text":"👤 My Favourite\n\nPersonally, I always go for the .map() or .forEach() method depending on the situation, in general, I've moved away from traditional loops when it comes to looping through an array.\n\nHow about you? 💬 6/7","type":"tweet","date":"2021-03-07T13:16:24.000Z","position":6}],"date":"2021-03-07T13:16:24.000Z","tags":["Uncategorised"],"meta":{"metrics":{"retweet_count":6,"reply_count":0,"like_count":6,"quote_count":0}},"type":"thread","position":1},{"conversation":"1366060943562727424","numberOfTweets":17,"slug":"gatsbyjs-email-signup-form-for-converkit","title":"🟣 #GatsbyJS: Email signup form for ConverKit 🟣 ","tweets":[{"id":"1366060943562727424","media":[{"media_key":"3_1366060937917173762","type":"photo","url":"https://pbs.twimg.com/media/EvU5L3IXEAIdrLf.jpg"}],"text":"🟣 #GatsbyJS: Email signup form for ConverKit 🟣 \n\nNewsletters are a great way to market your content &amp; build a following but to build your email list you need a way for people to sign up. Here's how to create an email signup form on GatsbyJS. 1/17\n--\n#100DaysOfCode #developers https://t.co/Ogv7n3zC9x","type":"tweet","date":"2021-02-28T16:21:23.000Z","position":1,"links":[]},{"id":"1366060944795836419","media":[{"media_key":"3_1366060937971646467","type":"photo","url":"https://pbs.twimg.com/media/EvU5L3VWQAMNzma.jpg"},{"media_key":"3_1366060937975898116","type":"photo","url":"https://pbs.twimg.com/media/EvU5L3WXIAQw_jo.jpg"}],"text":"1️⃣ Designing the email signup form component\n\nBefore we can build the functionality to facilitate the email signup we need to build the form people are going to use to sign up. Here's the code for mine and an example of what it looks like. 2/17 https://t.co/o7rCPaqGbK","type":"tweet","date":"2021-02-28T16:21:24.000Z","position":2,"links":[]},{"id":"1366060946695876609","text":"1️⃣  part 2\n\nThe code in the previous tweet can be broken down into three individual components:\n\n👉🏻 Outcome Message Container: Displays feedback after submitting\n👉🏻 Email Signup: Actual form elements\n👉🏻 Email Signup Form: Adds some extra elements like text and styling\n\n3/17","type":"tweet","date":"2021-02-28T16:21:24.000Z","position":3},{"id":"1366060947677315080","media":[{"media_key":"3_1366060937967505411","type":"photo","url":"https://pbs.twimg.com/media/EvU5L3UXEAMfxmI.jpg"}],"text":"1️⃣  part 3\n\nThe main section we will focus on is the EmailSignup components, let's break it down in more detail:\n\n👉🏻 1: Gathering values from util functions.\n👉🏻 2: Form Components\n👉🏻 3: Displaying feedback to the user\n\n4/17 https://t.co/iqKsEPajzo","type":"tweet","date":"2021-02-28T16:21:24.000Z","position":4,"links":[]},{"id":"1366060949262774273","media":[{"media_key":"3_1366060937929760778","type":"photo","url":"https://pbs.twimg.com/media/EvU5L3LXIAotQPz.jpg"}],"text":"2️⃣ Submitting a form\n\nSo, what happens when we submit a form?\n\nWhen we fill in the form, the useForm hook allows for the values to be set to state. Then once the form is submitted, it passes the values into the 'submitEmail' function within the 'useEmail' file. 5/17 https://t.co/cc2UwOV3qT","type":"tweet","date":"2021-02-28T16:21:25.000Z","position":5,"links":[]},{"id":"1366060950793641993","media":[{"media_key":"3_1366060937967525892","type":"photo","url":"https://pbs.twimg.com/media/EvU5L3UXYAQPmnT.jpg"}],"text":"3️⃣ Handling the submit\n\nInside the 'useEmail' file we do a series of things:\n\n👉🏻 Reset all submit state to default values\n👉🏻 Check there was an email entered\n👉🏻 Post the form to the serverless function\n👉🏻 Await &amp; handle the response\n\nSee attached for a breakdown 🖼️ 6/17 https://t.co/3CTISc2Ewf","type":"tweet","date":"2021-02-28T16:21:25.000Z","position":6,"links":[]},{"id":"1366060953071149058","media":[{"media_key":"3_1366060937971707909","type":"photo","url":"https://pbs.twimg.com/media/EvU5L3VXMAU5FL3.jpg"}],"text":"4️⃣ Serverless Function\n\nIf the 'useEmail' file receives an email then it will be posted to the serverless function which handles:\n\n👉🏻 Check for required fields (email) \n👉🏻 Posting to ConverKit for the signup\n👉🏻 Returning a success message back to 'useEmail'\n\n7/17 https://t.co/bOsM0LgU1U","type":"tweet","date":"2021-02-28T16:21:26.000Z","position":7,"links":[]},{"id":"1366060955034136577","text":"5️⃣ HTML Codes\n\nInside the 'useEmail' file, once we have a reply returned to us from the serverless function, we check to see what HTML code we get back:\n\n✅ 200\n❌ &gt;= 400 &amp;&amp; &lt; 600\n\nIf you want to read more check out:\n\n🔗 \n\n8/17","type":"tweet","date":"2021-02-28T16:21:26.000Z","position":8,"links":["https://developer.mozilla.org/en-US/docs/Web/HTTP/Status"]},{"id":"1366060956086853636","media":[{"media_key":"3_1366060937929711622","type":"photo","url":"https://pbs.twimg.com/media/EvU5L3LWYAYJ0On.jpg"}],"text":"6️⃣ Setting the outcome message/state\n\nIn the 'useEmail' file, we set multiple states depending on the HTML code. These are:\n\n👉🏻 setLoading: used for waiting for the serverless function\n👉🏻 setError: true if an error\n👉🏻 setMessage: Message to display to the user\n\n9/17 https://t.co/xyeJBm3IK1","type":"tweet","date":"2021-02-28T16:21:26.000Z","position":9,"links":[]},{"id":"1366060957483597831","media":[{"media_key":"3_1366060937933950982","type":"photo","url":"https://pbs.twimg.com/media/EvU5L3MXEAYvD0r.jpg"}],"text":"7️⃣ Displaying the message\n\nOnce we have set the message and error state this is returned to the original emailSignupForm Component to be displayed to the user.\n\n10/17 https://t.co/Sq3GXf7TcU","type":"tweet","date":"2021-02-28T16:21:27.000Z","position":10,"links":[]},{"id":"1366060958960001024","text":"🌟 Complete? 🌟 \n\nThis is now the base setup complete, we can sign emails up to our newsletter &amp; display the outcome to the user.\n\nHowever, you may have noticed a few mentions to 'chilliIsCool' in my code, what's this?\n\nThis is a  honeypot, let's take a look.\n\n11/17","type":"tweet","date":"2021-02-28T16:21:27.000Z","position":11},{"id":"1366060959903715335","text":"🍯 What is a honeypot?\n\n\"It's a sacrificial computer system that's intended to attract cyberattacks, like a decoy.\"\n\nWe are creating a field in the form that human users won't be able to see but computers will. \n\nSo, any bots populating the form will be trapped. \n\n12/17","type":"tweet","date":"2021-02-28T16:21:27.000Z","position":12},{"id":"1366060960889401352","media":[{"media_key":"3_1366060937963257860","type":"photo","url":"https://pbs.twimg.com/media/EvU5L3TWQAQ-_LB.jpg"}],"text":"🍯 Discarding submissions with this form\n\nThis field isn't required to be filled in as it'll only be filled in by bots. We pass this field to the serverless function and check for its existence.\n\nIf it does exist we return a status code 400 and a custom error. 13/17 https://t.co/MeQ3Xej1Ot","type":"tweet","date":"2021-02-28T16:21:27.000Z","position":13,"links":[]},{"id":"1366060962210582528","media":[{"media_key":"3_1366060937980104705","type":"photo","url":"https://pbs.twimg.com/media/EvU5L3XXUAE-Nyj.jpg"}],"text":"🍯 Hiding the form field\n\nBelieve it or not, we can just use a simple display: none on the honeypot field to hide it from view for human users.\n\nThis works as the DOM element is still there for computers to detect in the form but it won't show it for users. Awesome 😄 \n\n14/17 https://t.co/FW0JkLi0Pg","type":"tweet","date":"2021-02-28T16:21:28.000Z","position":14,"links":[]},{"id":"1366060963460481024","text":"🔗 Example\n\nIf you're interested in seeing this in action or fancy giving it a shot 😜 check out the links below:\n\n🔗 \n\nIf you want to see the code, check out:\n\n🔗 \n\n15/17","type":"tweet","date":"2021-02-28T16:21:28.000Z","position":15,"links":["https://conermurphy.com/","https://github.com/conermurphy/conermurphy.com"]},{"id":"1366060964437778437","text":"❓ Questions ❓ \n\nNow we're done, we have a fully functioning form that traps spam submissions from bots using a honeypot.\n\nIf you have any questions please drop them down below and I'll get back to you as soon as I can.\n\n16/17","type":"tweet","date":"2021-02-28T16:21:28.000Z","position":16},{"id":"1366060965456920580","text":"This is thread 28/28 in my February Twitter Thread Challenge. 📆\n\nIf you're interested in following along in my challenge or like this thread's content and want to see more please consider retweeting it for others to see and following me for future threads. 😀 17/17","type":"tweet","date":"2021-02-28T16:21:29.000Z","position":17}],"date":"2021-02-28T16:21:29.000Z","tags":["Uncategorised"],"meta":{"metrics":{"retweet_count":14,"reply_count":0,"like_count":8,"quote_count":0}},"type":"thread","position":2}]}