{"meta":{"lastFetchedData":"2021-04-01T16:53:05Z","numberOfThreads":3,"numberofTweets":24,"totalMetrics":{"retweet_count":12,"reply_count":0,"like_count":11,"quote_count":0}},"threads":[{"conversation":"1377551315266633728","numberOfTweets":3,"slug":"hey-everyone","title":"üëã Hey Everyone üëã","tweets":[{"id":"1377551315266633728","media":[{"media_key":"3_1377551311944740865","type":"photo","url":"https://pbs.twimg.com/media/Ex4LnqBW8AE4Yt0.jpg"}],"text":"üëã Hey Everyone üëã\n\nDo you like the content I create here on Twitter?\n\nI'm also active on other platforms and services. \n\nBelow are the links üëá ","type":"tweet","date":"2021-04-01T09:20:01.000Z","position":1,"links":[]},{"id":"1377551316747173893","text":"1Ô∏è‚É£ LinkedIn\n\nI've recently started using LinkedIn more and plan on releasing content over there too which will be in a longer format than Twitter. \n\nFeel free to connect with me üëá \n\nüîó ","type":"tweet","date":"2021-04-01T09:20:02.000Z","position":2,"links":["https://www.linkedin.com/in/coner-murphy/"]},{"id":"1377551317758054400","text":"2Ô∏è‚É£ Email Newsletter\n\nI've recently started up an Email Newsletter where I plan on sending out various types of content from coding topics to more personal topics like wellbeing. \n\nSign up below ( make sure to check your spam):\n\nüîó ","type":"tweet","date":"2021-04-01T09:20:02.000Z","position":3,"links":["https://coner-murphy.ck.page/a1344c86d6"]}],"date":"2021-04-01T09:20:02.000Z","tags":["Uncategorised"],"meta":{"metrics":{"retweet_count":0,"reply_count":0,"like_count":1,"quote_count":0}},"type":"thread","position":1},{"conversation":"1377508537379733506","numberOfTweets":15,"slug":"js-prototypal-inheritence-explained","title":"üü° JS: Prototypal Inheritence Explained üü°","tweets":[{"id":"1377508537379733506","media":[{"media_key":"3_1377508530526285830","type":"photo","url":"https://pbs.twimg.com/media/Ex3ktc0W8AYZ-8h.jpg"}],"text":"üü° JS: Prototypal Inheritence Explained üü°\n\nPrototypal Inheritance is one of those terms that sounds intimidating and complicated but it's not! In this thread, I'm going to cover what it is and how we use it. üßµ 1/15\n\n#100DaysOfCode #JavaScript #developers #DEVCommunity ","type":"tweet","date":"2021-04-01T06:30:02.000Z","position":1,"links":[]},{"id":"1377508538617069568","text":"1Ô∏è‚É£ What is it?\n\n\"Prototypal inheritance is the process an object uses in JavaScript to lookup properties and methods from its prototype should it not be found in the current object. \"\n\nEssentially, it allows us to use the methods and properties from another object. 2/15","type":"tweet","date":"2021-04-01T06:30:03.000Z","position":2},{"id":"1377508539514634247","media":[{"media_key":"3_1377508530916311040","type":"photo","url":"https://pbs.twimg.com/media/Ex3kteRWQAAiCAU.jpg"}],"text":"2Ô∏è‚É£ Example\n\nIn the image, we have 2 objects with different properties in them. \n\nWe try to log out the property from the first object by accessing it on the second object and unsurprisingly it doesn't work. ‚ùå \n\nBut, once we set the prototype it works. ‚úÖ\n\nWhy is this? 3/15 ","type":"tweet","date":"2021-04-01T06:30:03.000Z","position":3,"links":[]},{"id":"1377508540810690563","text":"The reason we can log out the property from the first object by accessing it on the second object after setting the prototype is because of prototypal inheritance.\n\nOnce the prototype is set, the chain is formed. When we try to access a property on an object... ‚è¨ 4/15","type":"tweet","date":"2021-04-01T06:30:03.000Z","position":4},{"id":"1377508541737615360","text":"...it looks within itself first, if it can find the property there it executes it. \n\nHowever, if the property isn't found within itself it then looks up the chain to the next link which we had set to the 'shop object.\n\nAs the property existed there it logged it out. 5/15","type":"tweet","date":"2021-04-01T06:30:03.000Z","position":5},{"id":"1377508542698098688","text":"3Ô∏è‚É£ The Chain\n\nPrototypal Inheritance is actually quite logical, it looks within itself and then works up the chain every time it can't find the requested property.\n\nThis process continues until it finds the property or it reaches the end of the chain which is null. 6/15","type":"tweet","date":"2021-04-01T06:30:04.000Z","position":6},{"id":"1377508543616724994","media":[{"media_key":"3_1377508530610135042","type":"photo","url":"https://pbs.twimg.com/media/Ex3ktdIWYAIUc7y.jpg"}],"text":"üîó Chain Examples\n\nIn the image, there are 3 examples showing the different situations of our example above.\n\n1 - No Prototype\n2 - One Custom Prototype \n3 - Two Custom Prototype\n\nBy default, all objects will finish with the last prototype being Object.prototype. 7/15 ","type":"tweet","date":"2021-04-01T06:30:04.000Z","position":7,"links":[]},{"id":"1377508545067909127","media":[{"media_key":"3_1377508530572439552","type":"photo","url":"https://pbs.twimg.com/media/Ex3ktc_XMAATp_R.jpg"}],"text":"4Ô∏è‚É£ Read Only\n\nThe prototype is only used for reading properties, when it comes to writing/deleting properties they are added or removed to the object it was called on regardless if it's in the prototype or not. 8/15 ","type":"tweet","date":"2021-04-01T06:30:04.000Z","position":8,"links":[]},{"id":"1377508546330365959","media":[{"media_key":"3_1377508533286092800","type":"photo","url":"https://pbs.twimg.com/media/Ex3ktnGWQAASaiR.jpg"}],"text":"4Ô∏è‚É£ Accessor Properties Exceptions\n\nThe only exception to the read-only rule is getters and setters.\n\nWhen using getters and setters we use the methods defined in the chain but the individual values are stored within the objects themselves. (More on this in a bit) 9/15 ","type":"tweet","date":"2021-04-01T06:30:04.000Z","position":9,"links":[]},{"id":"1377508547722948608","text":"5Ô∏è‚É£ \".this\"\n\nThe simple rule when it comes to using the \"this\" keyword with the prototype is:\n\n**No matter where the method is found whether the object itself or the prototype chain. When calling a method the \"this\" keyword always refers to the object before the dot.** \n\n10/15","type":"tweet","date":"2021-04-01T06:30:05.000Z","position":10},{"id":"1377508548666658816","media":[{"media_key":"3_1377508531352567815","type":"photo","url":"https://pbs.twimg.com/media/Ex3ktf5XAAcXyyU.jpg"}],"text":"5Ô∏è‚É£ \".this\" example\n\nIn our getters/setters from earlier, we used 'foodShop.age = 10', this called the setter which used \".this\". \n\nThe \" this\" referred to 'foodShop' and not 'shop' even though the setter was stored within 'shop'.\n\nAnother example in the üñºÔ∏è  11/15 ","type":"tweet","date":"2021-04-01T06:30:05.000Z","position":11,"links":[]},{"id":"1377508549933273092","media":[{"media_key":"3_1377508530585018370","type":"photo","url":"https://pbs.twimg.com/media/Ex3ktdCXIAIzRFY.jpg"}],"text":"6Ô∏è‚É£ Looping\n\nIf we want to see the properties on an object we can use 'Object.keys()' but this excludes inherited properties so we can't see the properties from the prototype.\n\nIf we want to do this, we can use a 'for..in' loop like shown in the image. 12/15 ","type":"tweet","date":"2021-04-01T06:30:05.000Z","position":12,"links":[]},{"id":"1377508551241961472","media":[{"media_key":"3_1377508530563997696","type":"photo","url":"https://pbs.twimg.com/media/Ex3ktc9WYAAClhf.jpg"}],"text":"6Ô∏è‚É£ Looping - Checking if a property exists on the object\n\nIf you want to see if a property exists within the object or has been inherited you can by using: \n\n'Object.prototype.hasOwnProperty()'\n\nThis will return a boolean value for every property, see the üñºÔ∏è for more... 13/15 ","type":"tweet","date":"2021-04-01T06:30:06.000Z","position":13,"links":[]},{"id":"1377508552529616896","text":"6Ô∏è‚É£ Looping - Checking Object.prototype\n\nYou may notice that when we loop through the inherited properties, methods like '.keys()' are not shown, why?\n\nBecause the Object.prototype has the 'enumerable:false' flag &amp; a for..in loop skips anything with this flag. 14/15","type":"tweet","date":"2021-04-01T06:30:06.000Z","position":14},{"id":"1377508553477472256","text":"‚ùó The use of __proto__ ‚ùó\n\nI have used __proto__ a few times throughout this thread but this shouldn't be done unless for demonstration as this syntax is now deprecated.\n\nInstead use, Object.getPrototypeOf &amp; Object.setPrototypeOf\n\nüîó \n\n15/15","type":"tweet","date":"2021-04-01T06:30:06.000Z","position":15,"links":["https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto"]}],"date":"2021-04-01T06:30:06.000Z","tags":["Uncategorised"],"meta":{"metrics":{"retweet_count":6,"reply_count":0,"like_count":3,"quote_count":0}},"type":"thread","position":2},{"conversation":"1368551099846770689","numberOfTweets":6,"slug":"js-looping-over-arrays","title":"üü° JS: Looping over Arrays üü° ","tweets":[{"id":"1368551099846770689","media":[{"media_key":"3_1368551096126410752","type":"photo","url":"https://pbs.twimg.com/media/Ev4R-JWWEAAxfyp.jpg"}],"text":"üü° JS: Looping over Arrays üü° \n\nLooping over arrays is such a massive part of handling data in JavaScript that I wanted to cover some of the most common methods of doing so in this thread. \n\nLet me know your favourite üí¨ 1/7\n\n#100DaysOfCode #JavaScript #developers ","type":"tweet","date":"2021-03-07T13:16:23.000Z","position":1,"links":[]},{"id":"1368551101109264384","media":[{"media_key":"3_1368551096160026628","type":"photo","url":"https://pbs.twimg.com/media/Ev4R-JeXAAQsL0q.jpg"}],"text":"1Ô∏è‚É£ For Loop\n\nThe for loop is one of the fundamentals of the language due to its versatility. It's no different when it comes to looping over an array.\n\nThe for loop works by creating a variable and incrementing it while a condition is true, we then access the index. 2/7 ","type":"tweet","date":"2021-03-07T13:16:23.000Z","position":2,"links":[]},{"id":"1368551102363426817","media":[{"media_key":"3_1368551096160034819","type":"photo","url":"https://pbs.twimg.com/media/Ev4R-JeXIAMIXVg.jpg"}],"text":"2Ô∏è‚É£ While Loop\n\nA slightly more unusual way of looping through arrays is the while loop. \n\nSimilar to the for loop, the while loop will loop while a condition is true but unlike a for loop, it doesn't have a pre-determined end and instead will go forever while true. 3/7 ","type":"tweet","date":"2021-03-07T13:16:23.000Z","position":3,"links":[]},{"id":"1368551103621693443","media":[{"media_key":"3_1368551096134799361","type":"photo","url":"https://pbs.twimg.com/media/Ev4R-JYWEAE12Ko.jpg"}],"text":"3Ô∏è‚É£ .forEach()\n\nMore recently introduced to the language, the .forEach() method is built into the Array.prototype and allows for us to directly loop over an array without calling a loop explicitly.\n\nIn fact, it actually uses loops underneath but just makes the syntax simpler. 4/7 ","type":"tweet","date":"2021-03-07T13:16:24.000Z","position":4,"links":[]},{"id":"1368551104875802633","media":[{"media_key":"3_1368551096160026629","type":"photo","url":"https://pbs.twimg.com/media/Ev4R-JeXAAUfLP9.jpg"}],"text":"4Ô∏è‚É£ .map()\n\n.map() is actually very similar to .forEach() with one key difference. \n\nWhen using .forEach() we can only iterate through the array and not return anything. But, when we use .map() we can return values from the callback function as shown in the üñºÔ∏è. 5/7 ","type":"tweet","date":"2021-03-07T13:16:24.000Z","position":5,"links":[]},{"id":"1368551106159198208","text":"üë§ My Favourite\n\nPersonally, I always go for the .map() or .forEach() method depending on the situation, in general, I've moved away from traditional loops when it comes to looping through an array.\n\nHow about you? üí¨ 6/7","type":"tweet","date":"2021-03-07T13:16:24.000Z","position":6}],"date":"2021-03-07T13:16:24.000Z","tags":["Uncategorised"],"meta":{"metrics":{"retweet_count":6,"reply_count":0,"like_count":7,"quote_count":0}},"type":"thread","position":3}]}